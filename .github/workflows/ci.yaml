name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ============================================================================
  # Create the release for uploading the various packages
  # ----------------------------------------------------------------------------
  # We start by creating a "draft" release at the beginning of the process.
  # The "build-linux" and "build-macos" jobs will then upload their built
  # packages to that release as artifacts.
  # ============================================================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.create-release.outputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Draft Release
        id: create-release
        run: |
          PACKAGE_VERSION="$(node -p 'require("./package.json").version')"

          gh release view "v${PACKAGE_VERSION}" && {
            echo "Release v${PACKAGE_VERSION} already exists!"
            echo "::error::Release v${PACKAGE_VERSION} already exists!"
            exit 1
          } || true

          gh release create "v${PACKAGE_VERSION}" --draft --generate-notes
          echo "version=${PACKAGE_VERSION}" >> "${GITHUB_OUTPUT}"
        env:
          GH_TOKEN: ${{ github.token }}

  # ============================================================================
  # Build and Test on Linux
  # ============================================================================
  build-linux:
    strategy:
      matrix:
        node: [20.x, 22.x, 24.x]
        os: [ubuntu-24.04, ubuntu-24.04-arm]

    name: Node ${{ matrix.node }} [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    needs: create-release
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ci_db_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          registry-url: https://registry.npmjs.org
          node-version: ${{ matrix.node }}

      - name: Build Library
        run: |
          npm clean-install --ignore-scripts
          npm run build
          npm run test
          gh release upload "v${PACKAGE_VERSION}" "./juit-libpq-"*"${PACKAGE_VERSION}.tgz"
        env:
          GH_TOKEN: ${{ github.token }}
          PACKAGE_VERSION: ${{ needs.create-release.outputs.version }}
          PGDATABASE: ci_db_test
          PGHOST: localhost
          PGPASSWORD: postgres
          PGTESTNOSSL: true
          PGUSER: postgres

  # ============================================================================
  # Build and Test on MacOS
  # ============================================================================
  build-macos:
    strategy:
      matrix:
        node: [20.x, 22.x, 24.x]
        os: [macos-15, macos-15-intel]

    name: Node ${{ matrix.node }} [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    needs: create-release
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          registry-url: https://registry.npmjs.org
          node-version: ${{ matrix.node }}

      - name: Build Library
        run: |
          # Install Postgres and run it
          brew install postgresql
          brew services start postgresql

          # Wait until Postgres is ready
          for i in $(seq 1 5); do
              if pg_isready -q -t 5; then break; fi
              sleep 10
          done

          # Final check
          if ! pg_isready -q -t 5; then
              echo "Postgres is not ready after 5 attempts"
              exit 1
          fi

          # Create the test database
          createdb ci_db_test

          npm clean-install --ignore-scripts
          npm run build
          npm run test
          gh release upload "v${PACKAGE_VERSION}" "./juit-libpq-"*"${PACKAGE_VERSION}.tgz"
        env:
          GH_TOKEN: ${{ github.token }}
          PACKAGE_VERSION: ${{ needs.create-release.outputs.version }}
          PGDATABASE: ci_db_test
          PGHOST: localhost
          # PGPASSWORD: postgres (no password for brew)
          PGTESTNOSSL: true
          # PGUSER: postgres (no user for brew, uses current user)

  # ============================================================================
  # Drop a release if one of the builds failed
  # ============================================================================
  clean-release:
    name: Drop Release
    runs-on: ubuntu-latest
    needs: [create-release, build-linux, build-macos]
    if: >
      ${{ always() &&
          needs.create-release.result == 'success' && (
            needs.build-linux.result == 'failure' ||
            needs.build-macos.result == 'failure'
      ) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Delete Release
        run: |
          gh release delete "v${PACKAGE_VERSION}" --yes
        env:
          GH_TOKEN: ${{ github.token }}
          PACKAGE_VERSION: ${{ needs.create-release.outputs.version }}
